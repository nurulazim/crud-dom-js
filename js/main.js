var todo = [];
var id;
var flag = -1;

function init() {

    createBasicHTML();

    // var tdlen = JSON.parse(localStorage.tdRecord);
    // if(tdlen.length === 0) {
    //     id = 0;
    // }
    // else{
    //     id = tdlen.length+1;
    // }

    if(localStorage.tdRecord) {
        var listItem = JSON.parse(localStorage.tdRecord);
        //id = listItem.length-1;
        // console.log(id);
        for(var i=0; i<listItem.length; i++) {
            todo.push(listItem[i]);
        }
    }
    showTasks();
}

// Generate unique IDs for use as pseudo-private/protected names.
// Similar in concept to
// <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
//
// The goals of this function are twofold:
// 
// * Provide a way to generate a string guaranteed to be unique when compared
//   to other strings generated by this function.
// * Make the string complex enough that it is highly unlikely to be
//   accidentally duplicated by hand (this is key if you're using `ID`
//   as a private/protected name on an object).
//
// Use:
//
//     var privateName = ID();
//     var o = { 'public': 'foo' };
//     o[privateName] = 'bar';
var ID = function () {
    // Math.random should be unique because of its seeding algorithm.
    // Convert it to base 36 (numbers + letters), and grab the first 9 characters
    // after the decimal.
    return '_' + Math.random().toString(36).substr(2, 9);
  };

function getId(){
}

function createBasicHTML() {
    createHeader();
    createInputField();
    createAddButton();
    createList();
}

function createHeader() {
    
    var tdHeader = document.createElement("HEADER");
    tdHeader.setAttribute("id","td-header");
    tdHeader.setAttribute("class","td-header");

    var headerSpan = document.createElement("SPAN");
    var spanI = document.createElement("I");
    spanI.setAttribute("class","far fa-check-square");
    headerSpan.appendChild(spanI);
    tdHeader.appendChild(headerSpan);

    var headerH1 = document.createElement("H1");
    var ht = document.createTextNode("To Do App");

    headerH1.appendChild(ht);
    tdHeader.appendChild(headerH1);

    // var b = document.getElementById("body");
    // b.appendChild(tdHeader);

    document.body.appendChild(tdHeader);

    var s = document.createElement("SECTION");
    s.setAttribute("id", "td-wrapper");
    s.setAttribute("class", "td-wrapper");
    document.body.appendChild(s);

}

function createInputField() {

    var inpt = document.createElement("INPUT");
    inpt.setAttribute("type", "text");
    inpt.setAttribute("placeholder", "type task");
    inpt.setAttribute("id", "td-task-input");
    document.getElementById("td-wrapper").appendChild(inpt);
}

function createAddButton() {
    var btn = document.createElement("BUTTON");        // Create a <button> element
    btn.setAttribute("id", "td-add-btn");
    var t = document.createTextNode("Add Task");       // Create a text node
    btn.appendChild(t);                                // Append the text to <button>
    document.getElementById("td-wrapper").appendChild(btn);
    btn.addEventListener("click", addTask); 
}

function createList() {
    var listdesign = document.createElement("UL");
    listdesign.setAttribute("id", "td-tasks-list");
    document.getElementById("td-wrapper").appendChild(listdesign);


    // var y = document.createElement("LI");
    // var t = document.createTextNode("Tea");
    // y.appendChild(t);
    // document.getElementById("td-tasks-list").appendChild(y);
}

function addTask() {
    // console.log("Add Task");
    var task= document.getElementById("td-task-input").value;
    // console.log(task);

    id = ID();

    var tdObj = {
        "task-id": id,
        "to-do-task": task
    };

    todo.push(tdObj);

    localStorage.tdRecord = JSON.stringify(todo);
    showTasks();
}

function deleteTask(index) {
     for(var i = 0; i<todo.length; i++) {
        console.log(todo[i]["task-id"]);
        console.log(index);
        
        if(todo[i]["task-id"] === index) {
            todo.splice(i, 1);
        }
     }
     localStorage.tdRecord = JSON.stringify(todo);
     showTasks();
}

function editTask(index) {
    for(var i = 0; i<todo.length; i++) {
        // console.log(todo[i]["task-id"]);
        // console.log(index);
        // console.log(text);

        if(todo[i]["task-id"] === index) {
            var obj = todo[i];
            
            var origtxt = obj["to-do-task"];
            //console.log(origtxt);
            var editinpt = document.getElementById("td-task-input");
            editinpt.setAttribute("value", origtxt);
            var edbtn = document.getElementById("td-add-btn");
            edbtn.style.display = "none";
            var upbtn = document.createElement("BUTTON");
            var upbtntxt = document.createTextNode("Update Task");
            upbtn.appendChild(upbtntxt);
            upbtn.setAttribute("id", "td-updt-btn");
            // var t = document.createTextNode("Add Task");       // Create a text node
            // btn.appendChild(t);                                // Append the text to <button>
            document.getElementById("td-wrapper").appendChild(upbtn);
            //upbtn.addEventListener("click", addTask);

            upbtn.addEventListener("click", updateTask.bind(this, i));
            
        }
     }
    //  localStorage.tdRecord = JSON.stringify(todo);
    //  showTasks();
}
function updateTask(idu) {
                var uptxt = document.getElementById("td-task-input").value;
                debugger
                todo[idu]["to-do-task"] = uptxt;
                console.log("up task");
                //todo.splice(i, 1, obj);
                document.getElementById("td-updt-btn").style.display = "none";
                document.getElementById("td-add-btn").style.display = "";
                localStorage.tdRecord = JSON.stringify(todo);
                showTasks();
                
}

function showTasks() {
    document.getElementById("td-tasks-list").innerHTML="";
    var list = document.getElementById("td-tasks-list");

    if(localStorage.tdRecord) {
        taskDetails(); 
    }
}

function taskDetails() {
    var listItem = JSON.parse(localStorage.tdRecord);
    //console.log(listItem[0]["to-do-task"]);
    for(var i=0; i<listItem.length; i++) {
        var x = document.createElement("LI");

        // console.log("Hello");
        var t = document.createTextNode(listItem[i]["to-do-task"]);
        x.appendChild(t);

        var idx = listItem[i]["task-id"];

        var del = document.createElement("SPAN");
        del.setAttribute("class", "td-del-btn");
        del.setAttribute("id", "td-del-btn");

        var editbtn = document.createElement("BUTTON");
        var editbtntext = document.createTextNode("Edit");
        editbtn.appendChild(editbtntext);
        editbtn.addEventListener("click", editTask.bind(this, idx));
        del.appendChild(editbtn);

        var delbtn = document.createElement("BUTTON");
        // console.log(listItem[i]["task-id"]);
        var btntext = document.createTextNode("Delete");
        delbtn.appendChild(btntext);
        
        delbtn.addEventListener("click", deleteTask.bind(this, idx));

        del.appendChild(delbtn);
        x.appendChild(del);

        document.getElementById("td-tasks-list").appendChild(x);
    }
}